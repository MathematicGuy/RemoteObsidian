{
	"nodes":[
		{"id":"93f8ce4bf4aae44c","type":"text","text":"Testing Systems","x":640,"y":-480,"width":340,"height":50,"color":"4"},
		{"id":"02cbfaeef9479aca","type":"text","text":"**Research core knowledge** in the **Weekend** and Focus on **Exploring knowledge on Weekdays.** \n","x":640,"y":-400,"width":340,"height":120},
		{"id":"589e68e43d1c8c5b","type":"text","text":"# 👑\n###  Crowns & Habits\n\n\n+ Calisthenics\n+ Communicate in German/English\n+ Wear Training Vest (day) with Jacket Cover up to stimulate my growth at night (take off at night)\n","x":-400,"y":-20,"width":440,"height":400},
		{"id":"979a58fc2550969c","type":"text","text":"### Motivated and Dopamint Boost Tasks\n\n+ [Face Detection with Pytorch](https://www.youtube.com/watch?v=yqkISICHH-U&list=PLtA5cPRCTDoO1zlH1M4SVlUs1OeI9zsRu)\n+ [Advance Computer Vision Project](https://youtu.be/01sAkU_NvOY?si=k4qSaH8VBgCZ5cyt)\n+ Formula Discovery\n\tExpected Value and Variance Sum\n+ [Foundational Large Language Models & Text Generation | Kaggle](https://www.kaggle.com/whitepaper-foundational-llm-and-text-generation))\n","x":60,"y":-400,"width":540,"height":360},
		{"id":"534247ac7cb58e9a","type":"text","text":"Competitive Mastery  (do sth competitive like LoL rank climbing, grinding IELTS scores, etc..)","x":60,"y":-20,"width":540,"height":80},
		{"id":"e793635bab74e78d","type":"text","text":"#### Petrichor & Wonderland\n\n+ Morning Jog\n+ Morning Cold Shower\n\tMorning Studied (Languages, Coding, Systemized, etc..) ","x":60,"y":80,"width":540,"height":300},
		{"id":"bce9fcdb8f2ccee5","type":"text","text":"**Anstler Palace:** where times and living experience optimized. Minds are on tracks and Tasks get Done.","x":-400,"y":-480,"width":1000,"height":50,"color":"4"},
		{"id":"0073ab0f682a5b79","type":"text","text":"### Commited & Hyper-Focus Tasks\n\n+ Machine Learning Specialization\n+ Knowledge Summarization\n+ IELTS Writing, Reading, Listenning\n+ Revision Lịch Sử Đảng\n+ Prepare my Behaviour Recognition and Text Summarization at least 2 days before the weekend   \n+ [Bahaviour Detection github (all I need)](https://github.com/TheoLvs/computer-vision-control)","x":-400,"y":-400,"width":440,"height":360},
		{"id":"8cf54dac87c23c2b","type":"text","text":"**Metal Health & Study Efficiency** ","x":-800,"y":-480,"width":360,"height":50,"color":"4"},
		{"id":"c86bbd7515752713","type":"text","text":"**Improvements**\nset median goals, low stress, limit your study time (make your study time prescious) -> more efficiency.  \nstay real, don't break promise with myself\n[Noting Facts]([Facebook](https://www.facebook.com/lecongthanh.infore)\nPost Cannon for ESL\n[Linear Algebra MIT]([Syllabus | Matrix Calculus for Machine Learning and Beyond | Mathematics | MIT OpenCourseWare](https://ocw.mit.edu/courses/18-s096-matrix-calculus-for-machine-learning-and-beyond-january-iap-2023/pages/syllabus/))\n[paper airpplane](https://www.youtube.com/shorts/OMCHEdovOr4)\n[ID Card Detection Reference](https://123docz.net/document/15335504-bao-cao-bai-tap-lon-xay-dung-ung-dung-trich-xuat-thong-tin-tu-can-cuoc-cong-dan.htm)\n[ID Card Detection Turtorial](https://www.facebook.com/groups/machinelearningcoban/posts/recap-h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-x%C3%A2y-d%E1%BB%B1ng-h%E1%BB%87-th%E1%BB%91ng-ocr-v%E1%BB%9Bi-%E1%BA%A3nh-c%C4%83n-c%C6%B0%E1%BB%9Bc-c%C3%B4ng-d%C3%A2n-dbnet-craft-viet/1961210351003029/)","x":-400,"y":400,"width":1000,"height":240},
		{"id":"a83d2856c4f8acf3","type":"text","text":"+ ! Notice the signs \"Energy Drain + Bored\" \n-> Stop immediately. Figure out what when wrong and readjust\n+ $ Find a more efficient study method if I feel bored.","x":-800,"y":-400,"width":360,"height":200},
		{"id":"f5d74200e16bae8b","type":"file","file":"Study Music Playlist.md","x":1760,"y":-440,"width":400,"height":400},
		{"id":"0f3b80b6dfaaf05a","type":"text","text":"**Tools**\nPerplexity AI: research\nGamma AI: powerpoint\n","x":640,"y":-260,"width":340,"height":120},
		{"id":"c3f40d9b97c041b0","type":"file","file":"Studying Better.md","x":-1600,"y":-480,"width":680,"height":800},
		{"id":"79eaccdee5227010","type":"file","file":"Time Line AIO Team Report.md","x":-2940,"y":400,"width":500,"height":1020},
		{"id":"5e05fa4b26738034","x":-2560,"y":4280,"width":800,"height":1280,"type":"text","text":"\n# Tổng quan chi tiết về crop_image\n```js\nTổng quan chi tiết về crop_image\n\nHàm crop_image trong crop_image.py là trung tâm của quá trình cắt ảnh thẻ CCCD. Nó không chỉ đơn thuần là một hàm cắt ảnh mà còn là một quy trình phức tạp, kết hợp nhiều bước để đảm bảo ảnh đầu ra được cắt và chỉnh sửa chính xác, ngay cả khi một số góc của thẻ bị khuất hoặc không detect được. Hàm này đóng vai trò quan trọng trong việc chuẩn bị ảnh cho các bước xử lý tiếp theo, đặc biệt là nhận dạng ký tự quang học (OCR).\n\nQuy trình thực hiện:\n\nHàm crop_image thực hiện các bước sau một cách tuần tự:\n\n    Khởi tạo và thiết lập:\n\n        Khởi tạo biến valid là True để theo dõi quá trình tái tạo góc.\n\n        Lấy chiều cao và chiều rộng của ảnh đã qua tiền xử lý (preprocessed_image).\n\n        Lấy danh sách tên các góc từ file cấu hình (corners_config).\n\n    Lọc các bounding box phát hiện:\n\n        Non-Maximum Suppression (NMS): Sử dụng hàm non_max_suppression để loại bỏ các bounding box chồng lấn nhau, chỉ giữ lại các bounding box có độ tin cậy cao nhất. Các tham số iou_threshold và threshold giúp điều chỉnh mức độ lọc.\n\n        Sắp xếp bounding box: Các bounding box còn lại sau NMS được sắp xếp theo thứ tự của class ID, giúp đảm bảo thứ tự của các góc (topleft, topright, botleft, botright) không bị xáo trộn.\n\n        Lấy tọa độ bounding box: Tọa độ bounding box (x1, y1, x2, y2) được lấy ra từ danh sách các detections đã sắp xếp.\n\n    Tính toán tọa độ trung tâm của các bounding box:\n\n        Sử dụng hàm get_center_point để tính toán tọa độ trung tâm của từng bounding box. Các tọa độ trung tâm này sẽ được coi là tọa độ các góc của thẻ.\n\n    Tạo dictionary chứa tọa độ góc:\n\n        Tạo dictionary label_boxes, trong đó key là tên các góc (topleft, topright, botleft, botright), và value là tọa độ trung tâm của các bounding box tương ứng.\n\n        Tạo một copy của label_boxes để annotate image trước khi reconstruct corners.\n\n    Xử lý trường hợp thiếu góc:\n\n        Kiểm tra số lượng góc: Kiểm tra xem có đủ 4 góc đã được detect hay không (if len(label_boxes) == 3). Nếu chỉ có 3 góc, quá trình tái tạo góc sẽ được thực hiện.\n\n        Tái tạo góc (calculate_missing_with_homography): Gọi hàm calculate_missing_with_homography để tính toán tọa độ của góc còn thiếu dựa trên tọa độ của 3 góc đã detect. Kết quả trả về là một dictionary chứa tọa độ 4 góc và một flag chỉ ra tọa độ có hợp lệ không.\n\n        Bật debug flag: Set debug flag to True so that the images of the corners are saved.\n\n        Xử lý lỗi tái tạo góc: Nếu flag valid từ calculate_missing_with_homography là False, điều này có nghĩa quá trình tái tạo góc đã thất bại. Trong trường hợp này, ảnh đầu vào sẽ được lưu vào thư mục fail_to_detect và một lỗi HTTPException sẽ được throw để báo hiệu quá trình cắt ảnh thất bại.\n\n    Annotate ảnh:\n\n        Annotate trước khi tái tạo góc: Gọi hàm annotate_image_with_corners để vẽ các đường tròn tại vị trí các góc đã detect trên ảnh gốc trước khi tái tạo góc.\n\n        Annotate sau khi tái tạo góc: Gọi hàm annotate_image_with_corners để vẽ các đường tròn tại vị trí các góc đã detect (hoặc tái tạo) trên ảnh gốc, để visualize các góc đã được detect hoặc reconstructed.\n\n    Chỉnh phối cảnh và cắt ảnh:\n\n        Lấy tọa độ các góc: Lấy tọa độ của 4 góc đã detect hoặc tái tạo từ dictionary reconstruct_label_boxes và chuyển thành định dạng NumPy float32 để sử dụng trong hàm perspective_transformation.\n\n        Xác định tọa độ đích: Xác định tọa độ của các điểm đích cho phép tạo ra một ảnh đầu ra hình chữ nhật với kích thước 640x640.\n\n        Chỉnh phối cảnh (perspective_transformation): Gọi hàm perspective_transformation để thực hiện biến đổi phối cảnh trên ảnh gốc, dựa trên tọa độ các góc đã detect/tái tạo và tọa độ các điểm đích. Kết quả là một ảnh thẻ CCCD đã được chỉnh phối cảnh.\n\n    Trả kết quả:\n\n        Trả về ảnh đã được annotate (có thể có các góc đã được tái tạo), ảnh thẻ CCCD đã được cắt và chỉnh phối cảnh, và một dictionary chứa tọa độ của 4 góc (đã detect hoặc tái tạo).\n\nMục đích của crop_image:\n\n    Cắt chính xác vùng chứa thẻ: Loại bỏ phần nền và các thành phần không cần thiết khác khỏi ảnh.\n\n    Chỉnh phối cảnh: Đưa ảnh thẻ về dạng chính diện, giúp cho các bước xử lý tiếp theo như OCR được chính xác hơn.\n\n    Tái tạo góc: Xử lý các trường hợp thẻ bị khuất góc, bị nghiêng, hoặc một số góc không được detect.\n\n    Chuẩn hóa kích thước: Đảm bảo ảnh đầu ra có kích thước chuẩn 640x640, tạo sự đồng nhất cho các bước xử lý tiếp theo.\n\n    Debug: Cho phép visualize các góc được detect hoặc reconstruct để kiểm tra kết quả.\n\nCác bước chính:\n\n    Lọc bounding box: Loại bỏ các bounding box thừa bằng NMS.\n\n    Xác định các điểm góc: Tính toán tọa độ trung tâm của các bounding box.\n\n    Tái tạo góc (nếu cần): Tính toán vị trí góc bị thiếu.\n\n    Annotate ảnh: Vẽ các góc đã được detect hoặc reconstruct trên ảnh.\n\n    Chỉnh phối cảnh: Thực hiện perspective transformation.\n\n    Cắt ảnh: Cắt ảnh dựa trên các góc đã xác định.\n\nKết quả đạt được:\n\n    Ảnh annotated: Ảnh gốc đã được vẽ các vị trí các góc (nếu bật debug flag) cả trước và sau khi tái tạo góc.\n\n    Ảnh thẻ CCCD đã cắt: Ảnh thẻ CCCD đã được chỉnh phối cảnh và cắt bỏ các phần thừa, đảm bảo hình chữ nhật và có kích thước 640x640.\n\n    Dictionary tọa độ góc: Một dictionary chứa tọa độ của 4 góc, bao gồm cả các góc đã tái tạo (nếu có).\n```"},
		{"id":"b8da2087c1d958a8","type":"text","text":"# Cấu trúc dự án\n```js\n**Tổng quan dự án:**\n\nDự án này là một ứng dụng tự động trích xuất thông tin từ ảnh thẻ Căn cước công dân (CCCD), sử dụng một pipeline xử lý ảnh và văn bản gồm 3 module chính. Ứng dụng này kết hợp các kỹ thuật xử lý ảnh tiên tiến, học sâu (Deep Learning) và nhận dạng ký tự quang học (OCR) để tự động hóa quá trình trích xuất, lưu trữ và hiển thị dữ liệu từ ảnh CCCD. Dữ liệu được lưu trữ trong cơ sở dữ liệu PostgreSQL, với hai bảng chính: ocr_texts (lưu thông tin trích xuất) và detection_logs (lưu log quá trình xử lý).\n\nCấu trúc dự án:\n\nDự án được tổ chức thành các thư mục và module rõ ràng, với sự phân tách trách nhiệm rõ ràng:\n\n    app (thư mục gốc): Chứa file app.py, file chính điều phối toàn bộ hoạt động của ứng dụng.\n\n    database: Chứa các file liên quan đến tương tác CSDL:\n\n        database.py: Thiết lập kết nối CSDL và cung cấp cơ chế dependency injection.\n\n        models.py: Định nghĩa các data model cho các bảng (ocr_texts và detection_logs).\n\n    templates: Chứa các file liên quan đến giao diện người dùng (frontend): index.html, scripts.js, và styles.css.\n\n    utils: Chứa các module tiện ích:\n\n        detect: Thư mục hiện tại không có file.\n\n        calculate_missed_corners.py: Tính toán các góc bị thiếu của thẻ CCCD.\n\n        crop_image.py: Thực hiện quá trình cắt và chỉnh phối cảnh ảnh thẻ CCCD.\n\n        database_operations.py: Chứa các hàm liên quan đến database (lưu trữ, log).\n\n        image_processing.py: Chứa các hàm tiền xử lý ảnh, phát hiện vùng chứa thẻ và vùng văn bản.\n\n        IOU.py: Tính toán Intersection Over Union để đánh giá các bounding box.\n\n        NMS.py: Thực hiện thuật toán Non-Maximum Suppression.\n\n        ocr_processing.py: Các hàm liên quan đến xử lý OCR (lưu ảnh, xử lý và lưu kết quả trích xuất văn bản).\n\n    validation: Nơi lưu trữ các ảnh đã xử lý trong quá trình kiểm thử.\n\n    weights: Chứa các file trọng số đã train của các mô hình học sâu.\n\n    Các file khác:.gitignore, corners-config.yaml, roi-config.yaml, testrun.py.\n\nPipeline xử lý và logic lưu CSDL:\n\n    Đầu vào: Ảnh thẻ CCCD gốc (có thể đã được gán nhãn).\n\n    Module 1: Text Area Detection (Phát hiện vùng chứa ID Card):\n\n        image_processing.py -> warp_image(image, file_name):\n\n            Tiền xử lý ảnh: resize_image, chuyển ảnh xám, CLAHE, chuyển về BGR.\n\n            Phát hiện 4 góc thẻ: Sử dụng yolov11s-4corners-redobest.pt.\n\n            Cắt và chỉnh phối cảnh (crop_image.py -> crop_image):\n\n                Lọc bounding box bằng NMS, xác định các điểm góc, tái tạo góc (nếu cần), annotation ảnh, chỉnh phối cảnh.\n\n        Đầu ra: Ảnh vùng thẻ CCCD đã được cắt và chỉnh phối cảnh.\n\n    Module 2: Text Region Detection (Phát hiện các vùng văn bản):\n\n        image_processing.py -> get_roi(image):\n\n            Tiền xử lý ảnh cho vùng văn bản: Chuyển ảnh xám, xóa bóng, làm mờ, cân bằng độ sáng và độ tương phản, chuyển về BGR.\n\n            Phát hiện vùng chứa văn bản: Sử dụng yolo11n-infor-areas-30.pt.\n\n            Lọc bounding box bằng NMS.\n\n        Đầu ra: Danh sách các vùng chứa văn bản (bounding box).\n\n    Module 3: Text Extraction (Trích xuất thông tin từ các vùng văn bản):\n\n        app.py:\n\n            OCR (VietOCR): Sử dụng mô hình VietOCR (đã train) để nhận dạng và trích xuất nội dung văn bản từ các vùng đã detect.\n\n            Xử lý kết quả OCR (ocr_processing.py -> regex_ocr):\n\n                Lấy thông tin lớp: Xác định loại thông tin từ class id của bounding box (roi_config).\n\n                Định dạng ngày tháng: Chuyển đổi các ngày tháng năm về dạng dd/mm/yyyy nếu có thể nhận dạng, hoặc đặt thành Không Thời Hạn nếu không nhận dạng được hoặc ít hơn 8 số.\n\n                Xóa từ trùng lặp: Sử dụng remove_duplicate_words_before_comma để loại bỏ các từ trùng lặp trước dấu phẩy (,) hoặc chấm (.).\n\n                Chỉnh sửa lỗi OCR: Sử dụng resub để sửa các lỗi chính tả phổ biến (ví dụ, \"Hà Nôi\" thành \"Hà Nội\").\n\n                Kết hợp các kết quả: Kết hợp các kết quả OCR của cùng loại thông tin lại thành 1 chuỗi.\n\n                Tạo output: Kết quả sau cùng sẽ được đưa vào từ điển chứa các key id, name, dob, gender, nationality, origin_place, current_place, và expire_date.\n\n            Lưu trữ thông tin vào CSDL (database_operations.py -> save_to_db):\n\n                Dữ liệu văn bản đã xử lý từ output của regex_ocr được tạo thành đối tượng OCRText và lưu vào bảng ocr_texts.\n\n            Lưu log vào CSDL (database_operations.py -> save_db_log):\n\n                Ghi lại log về quá trình trích xuất và lưu dữ liệu vào bảng detection_logs, bao gồm cả thành công và thất bại.\n\nLogic lưu trữ dữ liệu vào CSDL chi tiết:\n\n    Bảng ocr_texts:\n\n        Mục đích: Lưu trữ thông tin chi tiết được trích xuất từ ảnh thẻ CCCD sau khi xử lý OCR, có các cột: id_text, id_number, name, dob, gender, nationality, origin_place, current_place, expire_date.\n\n        Vị trí lưu: Dữ liệu được lưu vào bảng này sau khi quá trình OCR và trích xuất thông tin hoàn tất, tại hàm save_to_db trong database_operations.py, được gọi trong app.py, sử dụng output từ regex_ocr.\n\n    Bảng detection_logs:\n\n        Mục đích: Lưu trữ log về quá trình xử lý ảnh thẻ CCCD, bao gồm trạng thái thành công, thất bại, và các thông báo liên quan, có các cột: log_id, timestamp, status, message, file_name.\n\n        Vị trí lưu: Dữ liệu được lưu vào bảng này trong quá trình xử lý ảnh, tại các hàm save_db_log được gọi từ các khối try-except trong app.py và sau khi lưu data thành công.\n```","x":-1560,"y":4280,"width":800,"height":1280}
	],
	"edges":[]
}